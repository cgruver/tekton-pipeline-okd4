apiVersion: v1
kind: Template
metadata:
  annotations:
    description: "Initialize Pipeline Objects for Tekton Java Builds"
    iconClass: icon-java
    openshift.io/display-name: "Initialize Pipeline Objects for Tekton Java Builds (Spring Boot & Quarkus)"
    template.openshift.io/bindable: "false"
    tags: "tekton"
    version: "1.0"
  name: initialize-tekton-pipeline
objects:
- apiVersion: redhatcop.redhat.io/v1alpha1
  kind: NamespaceConfig
  metadata:
    name: tekton-pipeline-config
  spec:
    labelSelector:
      matchLabels:
        pipeline: tekton
    templates:
    - objectTemplate: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: pipeline
          namespace: {{ .Name }}

    - objectTemplate: |
        apiVersion: tekton.dev/v1beta1
        kind: Pipeline
        metadata:
          name: build-and-deploy-quarkus-jvm-app
          namespace: {{ .Name }}
        spec:
          params:
          - name: appName
            type: string
            description: "Application Name"
          - name: git-repo
            type: string
            description: "Git Repository URL"
          - name: git-branch
            type: string
            description: "Git Branch to clone"
            default: "master"
          tasks:
            - name: build
              taskRef:
                name: build-quarkus-jvm-app
              params:
                - name: appName
                  value: $(params.appName)
                - name: git-repo
                  value: $(params.git-repo)
                - name: git-branch
                  value: $(params.git-branch)
            - name: config
              taskRef:
                name: config-app
              runAfter:
                - build
              params:
                - name: git-repo
                  value: $(params.git-repo)
                - name: git-branch
                  value: $(params.git-branch)
            - name: deploy
              taskRef:
                name: deploy-app
              runAfter:
                - config
              params:
                - name: appName
                  value: $(params.appName)

    - objectTemplate: |
        apiVersion: tekton.dev/v1beta1
        kind: Pipeline
        metadata:
          name: build-and-deploy-quarkus-native-app
          namespace: {{ .Name }}
        spec:
          params:
          - name: appName
            type: string
            description: "Application Name"
          - name: git-repo
            type: string
            description: "Git Repository URL"
          - name: git-branch
            type: string
            description: "Git Branch to clone"
            default: "master"
          tasks:
            - name: build
              taskRef:
                name: build-quarkus-native-app
              params:
                - name: appName
                  value: $(params.appName)
                - name: git-repo
                  value: $(params.git-repo)
                - name: git-branch
                  value: $(params.git-branch)
            - name: config
              taskRef:
                name: config-app
              runAfter:
                - build
              params:
                - name: git-repo
                  value: $(params.git-repo)
                - name: git-branch
                  value: $(params.git-branch)
            - name: deploy
              taskRef:
                name: deploy-app
              runAfter:
                - config
              params:
                - name: appName
                  value: $(params.appName)

    - objectTemplate: |
        apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: build-quarkus-jvm-app
          namespace: {{ .Name }}
        spec:
          stepTemplate:
            securityContext:
              capabilities:
                drop:
                - KILL
              runAsUser: 1000640000
            volumeMounts:
              - name: varlibc
                mountPath: /var/lib/containers
              - name: maven-settings
                mountPath: /tmp/maven-settings
          params:
            - name: appName
              type: string
              description: "Application Name"
            - name: git-repo
              type: string
              description: "Git Repository SSH URL"
            - name: git-branch
              type: string
              description: "Git Branch to clone"
              default: "master"
            - name: tlsVerify
              description: tls verify
              type: string
              default: "false"
          steps:
            - name: prep-build
              image: image-registry.openshift-image-registry.svc:5000/openshift/maven-ubi-minimal:3.6.3-jdk-11
              imagePullPolicy: Always
              script: |
                git clone -b $(params.git-branch) --single-branch $(params.git-repo) /workspace/source
                cp /tmp/maven-settings/settings.xml /workspace/source
                cd /workspace/source
                echo "$(git rev-parse HEAD)" > git-commit.out
              env:
                - name: user.home
                  value: /tekton/home
              workingDir: "/"
            - name: build-sources
              image: image-registry.openshift-image-registry.svc:5000/openshift/maven-ubi-minimal:3.6.3-jdk-11
              imagePullPolicy: Always
              command:
                - mvn
              args:
                - "-DskipTests"
                - "-Dmaven.wagon.http.ssl.insecure=true"
                - "-ssettings.xml"
                - "-DappName=app"
                - "clean"
                - "package"
              env:
                - name: user.home
                  value: /tekton/home
              workingDir: "/workspace/source"
            - name: build-image
              image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:noroot
              imagePullPolicy: Always
              script: |
                echo "tekton:x:$(id -u):0:tekton user:${HOME}:/sbin/nologin" >> /etc/passwd
                echo $(id -u):1:65536 > /etc/subuid
                echo $(id -u):1100000000:65536 >> /etc/subuid
                echo $(id -u):1:65536 > /etc/subgid
                echo $(id -u):1100000000:65536 >> /etc/subgid
                export BUILDAH_ISOLATION=chroot
                mkdir -p ${HOME}/.config/containers
                echo "[storage]" > ${HOME}/.config/containers/storage.conf
                echo "driver=\"vfs\"" >> ${HOME}/.config/containers/storage.conf
                DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.appName):latest"
                CONTAINER=$(buildah --tls-verify=$(params.tlsVerify) from image-registry.openshift-image-registry.svc:5000/openshift/jdk-ubi-minimal:8.1 )
                buildah copy ${CONTAINER} ./target/lib/* /deployments/lib/
                buildah copy ${CONTAINER} ./target/app-runner.jar /deployments/app.jar
                buildah config --label GIT_COMMIT=$(cat git-commit.out) --author="Tekton" ${CONTAINER}
                buildah commit ${CONTAINER} ${DESTINATION_IMAGE}
                buildah unmount ${CONTAINER}
              env:
                - name: user.home
                  value: /tekton/home
              workingDir: "/workspace/source"
            - name: push-image
              image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:noroot
              imagePullPolicy: Always
              script: |
                echo "tekton:x:$(id -u):0:tekton user:${HOME}:/sbin/nologin" >> /etc/passwd
                DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.appName):latest"
                buildah push --tls-verify=$(params.tlsVerify) ${DESTINATION_IMAGE} docker://${DESTINATION_IMAGE}
              workingDir: "/workspace/source"
          volumes:
            - name: varlibc
              emptyDir: {}
            - name: maven-settings
              configMap:
                name: maven-settings-xml

    - objectTemplate: |
        apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: build-quarkus-native-app
          namespace: {{ .Name }}
        spec:
          stepTemplate:
            securityContext:
              capabilities:
                drop:
                - KILL
              runAsUser: 1000640000
            volumeMounts:
              - name: varlibc
                mountPath: /var/lib/containers
              - name: maven-settings
                mountPath: /tmp/maven-settings
          params:
            - name: appName
              type: string
              description: "Application Name"
            - name: git-repo
              type: string
              description: "Git Repository SSH URL"
            - name: git-branch
              type: string
              description: "Git Branch to clone"
              default: "master"
            - name: tlsVerify
              description: tls verify
              type: string
              default: "false"
          steps:
            - name: prep-build
              image: image-registry.openshift-image-registry.svc:5000/openshift/maven-ubi-minimal-quarkus:3.6.3-jdk-11
              imagePullPolicy: Always
              script: |
                git clone -b $(params.git-branch) --single-branch $(params.git-repo) /workspace/source
                cp /tmp/maven-settings/settings.xml /workspace/source
                cd /workspace/source
                echo "$(git rev-parse HEAD)" > git-commit.out
              env:
                - name: user.home
                  value: /tekton/home
              workingDir: "/"
            - name: build-sources
              image: image-registry.openshift-image-registry.svc:5000/openshift/maven-ubi-minimal-quarkus:3.6.3-jdk-11
              imagePullPolicy: Always
              command:
                - mvn
              args:
                - "-DskipTests"
                - "-Dmaven.wagon.http.ssl.insecure=true"
                - "-ssettings.xml"
                - "-DappName=app"
                - "-Pnative"
                - "clean"
                - "package"
              env:
                - name: user.home
                  value: /tekton/home
              workingDir: "/workspace/source"
            - name: build-image
              image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:noroot
              imagePullPolicy: Always
              script: |
                echo "tekton:x:$(id -u):0:tekton user:${HOME}:/sbin/nologin" >> /etc/passwd
                echo $(id -u):1:65536 > /etc/subuid
                echo $(id -u):1100000000:65536 >> /etc/subuid
                echo $(id -u):1:65536 > /etc/subgid
                echo $(id -u):1100000000:65536 >> /etc/subgid
                export BUILDAH_ISOLATION=chroot
                mkdir -p ${HOME}/.config/containers
                echo "[storage]" > ${HOME}/.config/containers/storage.conf
                echo "driver=\"vfs\"" >> ${HOME}/.config/containers/storage.conf
                DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.appName):latest"
                cat << EOF > Dockerfile
                FROM image-registry.openshift-image-registry.svc:5000/openshift/ubi-minimal:8.1
                WORKDIR /work/
                COPY target/app-runner /work/application
                RUN chmod 775 /work
                EXPOSE 8080
                CMD ["./application", "-Dquarkus.http.host=0.0.0.0", "${JAVA_OPTIONS}"]
                EOF
                buildah bud --tls-verify=$(params.tlsVerify) -t ${DESTINATION_IMAGE} -f Dockerfile
              env:
                - name: user.home
                  value: /tekton/home
              workingDir: "/workspace/source"
            - name: push-image
              image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:noroot
              imagePullPolicy: Always
              script: |
                echo "tekton:x:$(id -u):0:tekton user:${HOME}:/sbin/nologin" >> /etc/passwd
                DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.appName):latest"
                buildah push --tls-verify=$(params.tlsVerify) ${DESTINATION_IMAGE} docker://${DESTINATION_IMAGE}
              workingDir: "/workspace/source"
          volumes:
            - name: varlibc
              emptyDir: {}
            - name: maven-settings
              configMap:
                name: maven-settings-xml

    - objectTemplate: |
        apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: config-app
          namespace: {{ .Name }}
        spec:
          params:
            - name: git-repo
              type: string
              description: "Git Repository SSH URL"
            - name: git-branch
              type: string
              description: "Git Branch to clone"
              default: "master"
          steps:
            - name: prep-build
              image: image-registry.openshift-image-registry.svc:5000/openshift/maven-ubi-minimal:3.6.3-jdk-11
              imagePullPolicy: Always
              script: |
                git clone -b $(params.git-branch) --single-branch $(params.git-repo) /workspace/source
              env:
                - name: user.home
                  value: /tekton/home
              workingDir: "/"
            - name: apply
              image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:4.5.0
              imagePullPolicy: Always
              workingDir: /workspace/source
              command: ["/bin/bash", "-c"]
              args:
                - |-
                  echo Applying configs in ocp/dev directory
                  oc apply -f ./ocp/dev
                  echo -----------------------------------

    - objectTemplate: |
        apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: deploy-app
          namespace: {{ .Name }}
        spec:
          params:
            - name: appName
              description: the application name
          steps:
            - name: rollout
              image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:4.5.0
              imagePullPolicy: Always
              workingDir: /workspace
              command: ["/bin/bash", "-c"]
              args:
                - |-
                  echo Rolling out $(params.appName)
                  DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.appName):latest"
                  oc set image deployment/$(params.appName) $(params.appName)=${DESTINATION_IMAGE}
                  oc rollout restart deployment/$(params.appName)
                  echo -----------------------------------

    - objectTemplate: |
        apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: initialize-deployment
          namespace: {{ .Name }}
        spec:
          params:
            - name: appName
              description: the application name
          steps:
            - name: initialize
              image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:4.5.0
              imagePullPolicy: Always
              workingDir: /workspace
              command: ["/bin/bash", "-c"]
              args:
                - |-
                  echo Configuring Deployment $(params.appName)
                  DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.appName):latest"
                  oc set image deployment/$(params.appName) $(params.appName)=${DESTINATION_IMAGE}
                  echo -----------------------------------

    - objectTemplate: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: maven-settings-xml
          namespace: {{ .Name }}
        data:
          settings.xml: |
            <?xml version="1.0" encoding="UTF-8"?>
            <settings>
                <mirrors>
                    <mirror>
                        <id>${MVN_MIRROR_ID}</id>
                        <name>${MVN_MIRROR_NAME}</name>
                        <url>${MVN_MIRROR_URL}</url>
                        <mirrorOf>*</mirrorOf>
                    </mirror>
                </mirrors>
                <profiles>
                    <profile>
                        <id>maven-nexus-repo</id>
                        <repositories>
                            <repository>
                                <id>${MVN_MIRROR_ID}</id>
                                <name>${MVN_MIRROR_NAME}</name>
                                <url>${MVN_MIRROR_URL}</url>
                            </repository>
                        </repositories>
                    </profile>
                </profiles>
                <activeProfiles>
                    <activeProfile>maven-nexus-repo</activeProfile>
                </activeProfiles>
            </settings>

parameters:
  -
    description: "ID for your Maven Nexus mirror"
    displayName: "Maven Mirror ID"
    name: MVN_MIRROR_ID
    required: true
    value: "homelab-central"
  -
    description: "Maven Mirror Name"
    displayName: "Maven Mirror Name"
    name: MVN_MIRROR_NAME
    required: true
    value: "homelab-central"
  -
    description: "Maven Mirror URL"
    displayName: "Maven Mirror URL"
    name: MVN_MIRROR_URL
    required: true
    value: "https://nexus.your.domain.com:8443/repository/homelab-central/"